/*
 * AI model Service Restful API
 * This is an ai model service
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.aliyun.openservices.aiservice.api;

import com.aliyun.openservices.aiservice.model.AIGCCheckRequest;
import com.aliyun.openservices.aiservice.model.AIGCCreatRequest;
import com.aliyun.openservices.aiservice.model.AIGCImageCreateResponse;
import com.aliyun.openservices.aiservice.model.AIGCTrainRequest;
import com.aliyun.openservices.aiservice.model.AIGCImageTrainResponse;
import com.aliyun.openservices.aiservice.model.Response;
import com.aliyun.openservices.aiservice.ApiCallback;
import com.aliyun.openservices.aiservice.ApiClient;
import com.aliyun.openservices.aiservice.ApiException;
import com.aliyun.openservices.aiservice.ApiResponse;
import com.aliyun.openservices.aiservice.Configuration;
import com.aliyun.openservices.aiservice.Pair;
import com.aliyun.openservices.aiservice.ProgressRequestBody;
import com.aliyun.openservices.aiservice.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AigcImagesApi {
    private ApiClient apiClient;

    public AigcImagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AigcImagesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for aigcImagesCheckPost
     * @param body aigc检测body (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call aigcImagesCheckPostCall(AIGCCheckRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/aigc_images/check";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            //"application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth", "requestTime" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aigcImagesCheckPostValidateBeforeCall(AIGCCheckRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling aigcImagesCheckPost(Async)");
        }
        
        com.squareup.okhttp.Call call = aigcImagesCheckPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }
    /**
     * aigc图像检测
     *
     * @param images aigc 检测的图片列表 (required)
     *
     * @return Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Response aigcImagesCheck(List<String> images) throws ApiException {
        AIGCCheckRequest body = new AIGCCheckRequest();
        body.setImages(images);
        body.setAction("AIGCImageCheck");
        ApiResponse<Response> resp = aigcImagesCheckPostWithHttpInfo(body);
        return resp.getData();
    }
    /**
     * aigc图像检测
     *
     * @param images aigc 检测的图片列表 (required)
     * @param modelName 模型名称，如果是全局模型，可以不填
     * @param  config 模型额外的请求参数
     *
     * @return Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Response aigcImagesCheck(List<String> images, String modelName, Map<String, Object> config) throws ApiException {
        AIGCCheckRequest body = new AIGCCheckRequest();
        body.setImages(images);
        body.setModelName(modelName);
        body.setAction("AIGCImageCheck");
        body.setConfigure(config);
        ApiResponse<Response> resp = aigcImagesCheckPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * aigc图像检测
     * 
     * @param body aigc检测body (required)
     * @return Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Response aigcImagesCheckPost(AIGCCheckRequest body) throws ApiException {
        ApiResponse<Response> resp = aigcImagesCheckPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * aigc图像检测
     * 
     * @param body aigc检测body (required)
     * @return ApiResponse&lt;Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Response> aigcImagesCheckPostWithHttpInfo(AIGCCheckRequest body) throws ApiException {
        com.squareup.okhttp.Call call = aigcImagesCheckPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * aigc图像检测 (asynchronously)
     * 
     * @param body aigc检测body (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aigcImagesCheckPostAsync(AIGCCheckRequest body, final ApiCallback<Response> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aigcImagesCheckPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for aigcImagesCreatePost
     * @param body aigc预测body (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call aigcImagesCreatePostCall(AIGCCreatRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/aigc_images/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth", "requestTime" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aigcImagesCreatePostValidateBeforeCall(AIGCCreatRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling aigcImagesCreatePost(Async)");
        }
        
        com.squareup.okhttp.Call call = aigcImagesCreatePostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }
    /**
     * aigc预测
     *
     * @param  modelId aigc图片训练返回的模型ID (required)
     * @param  templateImage 模板图片地址 (required)
     *
     * @return AIGCImageCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AIGCImageCreateResponse aigcImagesCreate(String modelId, String templateImage) throws ApiException {
        return aigcImagesCreate(modelId, templateImage, "", null);
    }
    /**
     * aigc预测
     *
     * @param  modelId aigc图片训练返回的模型ID (required)
     * @param  templateImage 模板图片地址 (required)
     * @param  modelName 模型名称
     * @param  config 模型配置
     *
     * @return Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AIGCImageCreateResponse aigcImagesCreate(String modelId, String templateImage, String modelName, Map<String, Object> config ) throws ApiException {
        AIGCCreatRequest body = new AIGCCreatRequest();
        body.setConfigure(config);
        body.setAction("AIGCImageCreate");
        body.setModelName(modelName);
        body.setTemplateImage(templateImage);
        body.setModelId(modelId);
        ApiResponse<AIGCImageCreateResponse> resp = aigcImagesCreatePostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * aigc预测
     * 
     * @param body aigc预测body (required)
     * @return Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AIGCImageCreateResponse aigcImagesCreatePost(AIGCCreatRequest body) throws ApiException {
        ApiResponse<AIGCImageCreateResponse> resp = aigcImagesCreatePostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * aigc预测
     * 
     * @param body aigc预测body (required)
     * @return ApiResponse&lt;AIGCImageCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AIGCImageCreateResponse> aigcImagesCreatePostWithHttpInfo(AIGCCreatRequest body) throws ApiException {
        com.squareup.okhttp.Call call = aigcImagesCreatePostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<AIGCImageCreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * aigc预测 (asynchronously)
     * 
     * @param body aigc预测body (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aigcImagesCreatePostAsync(AIGCCreatRequest body, final ApiCallback<Response> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aigcImagesCreatePostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for aigcImagesTrainPost
     * @param body aigc图像body (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call aigcImagesTrainPostCall(AIGCTrainRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/aigc_images/train";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            //"application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth", "requestTime" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aigcImagesTrainPostValidateBeforeCall(AIGCTrainRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling aigcImagesTrainPost(Async)");
        }
        
        com.squareup.okhttp.Call call = aigcImagesTrainPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * aigc图像
     *
     * @param  images aigc图像训练图片列表 (required)
     *
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AIGCImageTrainResponse aigcImagesTrain(List<String> images) throws ApiException {
        return aigcImagesTrain(images, "", null);
    }

    /**
     * aigc图像
     *
     * @param  images aigc图像训练图片列表 (required)
     * @param  modelName aigc图像训练模型名称
     * @param  config aigc图像训练模型配置
     *
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AIGCImageTrainResponse aigcImagesTrain(List<String> images, String modelName, Map<String,Object> config) throws ApiException {
        AIGCTrainRequest body = new AIGCTrainRequest();
        body.setImages(images);
        body.setConfigure(config);
        body.setModelName(modelName);
        body.setAction("AIGCImageTrain");
        ApiResponse<AIGCImageTrainResponse> resp = aigcImagesTrainPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * aigc图像
     * 
     * @param body aigc图像body (required)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AIGCImageTrainResponse aigcImagesTrainPost(AIGCTrainRequest body) throws ApiException {
        ApiResponse<AIGCImageTrainResponse> resp = aigcImagesTrainPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * aigc图像
     * 
     * @param body aigc图像body (required)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AIGCImageTrainResponse> aigcImagesTrainPostWithHttpInfo(AIGCTrainRequest body) throws ApiException {
        com.squareup.okhttp.Call call = aigcImagesTrainPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<AIGCImageTrainResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * aigc图像 (asynchronously)
     * 
     * @param body aigc图像body (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aigcImagesTrainPostAsync(AIGCTrainRequest body, final ApiCallback<AIGCImageTrainResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aigcImagesTrainPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AIGCImageTrainResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
