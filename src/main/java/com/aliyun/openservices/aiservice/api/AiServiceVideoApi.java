/*
 * AI model Service Restful API
 * This is an ai model service
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.aliyun.openservices.aiservice.api;

import com.aliyun.openservices.aiservice.model.AsyncVideoBatchJobResponse;
import com.aliyun.openservices.aiservice.model.AsyncVideoJobResponse;
import com.aliyun.openservices.aiservice.model.BatchVideoRequest;
import com.aliyun.openservices.aiservice.model.Response;
import com.aliyun.openservices.aiservice.model.VideoMeta;
import com.aliyun.openservices.aiservice.model.VideoRequest;
import com.aliyun.openservices.aiservice.ApiCallback;
import com.aliyun.openservices.aiservice.ApiClient;
import com.aliyun.openservices.aiservice.ApiException;
import com.aliyun.openservices.aiservice.ApiResponse;
import com.aliyun.openservices.aiservice.Configuration;
import com.aliyun.openservices.aiservice.Pair;
import com.aliyun.openservices.aiservice.ProgressRequestBody;
import com.aliyun.openservices.aiservice.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AiServiceVideoApi {
    private ApiClient apiClient;

    public AiServiceVideoApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AiServiceVideoApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for aiModelBatchVideo
     * @param body 视频检测body (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call aiModelBatchVideoCall(BatchVideoRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/batch_videos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth", "requestTime" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aiModelBatchVideoValidateBeforeCall(BatchVideoRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling aiModelBatchVideo(Async)");
        }
        
        com.squareup.okhttp.Call call = aiModelBatchVideoCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 批量视频检测接口
     * 
     * @param body 视频检测body (required)
     * @return Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsyncVideoBatchJobResponse aiModelBatchVideo(BatchVideoRequest body) throws ApiException {
        ApiResponse<AsyncVideoBatchJobResponse> resp = aiModelBatchVideoWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 批量视频检测接口
     * 
     * @param body 视频检测body (required)
     * @return ApiResponse&lt;Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsyncVideoBatchJobResponse> aiModelBatchVideoWithHttpInfo(BatchVideoRequest body) throws ApiException {
        com.squareup.okhttp.Call call = aiModelBatchVideoValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<AsyncVideoBatchJobResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 批量视频检测接口 (asynchronously)
     * 
     * @param body 视频检测body (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aiModelBatchVideoAsync(BatchVideoRequest body, final ApiCallback<Response> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aiModelBatchVideoValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for aiModelVideo
     * @param body 视频检测body (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call aiModelVideoCall(VideoRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/videos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth", "requestTime" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aiModelVideoValidateBeforeCall(VideoRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling aiModelVideo(Async)");
        }
        
        com.squareup.okhttp.Call call = aiModelVideoCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }
    /**
     * 视频标签分类接口
     *
     * @param videoUrl 视频地址 (required)
     * @param videoTitle 视频标题 (required)
     *
     * @return Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsyncVideoJobResponse classifyLabelVideo(String videoUrl, String videoTitle ) throws ApiException {
        return classifyLabelVideo(videoUrl, videoTitle, "", null);
    }

    /**
     * 视频标签分类接口
     *
     * @param videoUrl 视频地址 (required)
     * @param videoTitle 视频标题 (required)
     * @param modelName 模型名称
     * @param config 模型配置
     *
     * @return Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsyncVideoJobResponse classifyLabelVideo(String videoUrl, String videoTitle, String modelName, Map<String, Object> config) throws ApiException {
        VideoRequest body = new VideoRequest();
        body.setModelName(modelName);
        body.setConfigure(config);
        body.setVideoTitle(videoTitle);
        body.setVideoUrl(videoUrl);
        body.setAction("ClassifyLabelVideo");
        ApiResponse<AsyncVideoJobResponse> resp = aiModelVideoWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 批量视频标签分类接口
     *
     * @param videos 视频地址列表 (required)
     * @param modelName 模型名称
     * @param config 模型配置
     *
     * @return Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsyncVideoBatchJobResponse batchClassifyLabelVideo(List<VideoMeta> videos, String modelName, Map<String, Object> config) throws ApiException {
        BatchVideoRequest body = new BatchVideoRequest();
        body.setModelName(modelName);
        body.setConfigure(config);
        body.setVideos(videos);
        body.setAction("ClassifyLabelVideo");
        ApiResponse<AsyncVideoBatchJobResponse> resp = aiModelBatchVideoWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 视频质量检测
     *
     * @param videoUrl 视频地址 (required)
     * @param videoTitle 视频标题 (required)
     *
     * @return Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsyncVideoJobResponse videoQA(String videoUrl, String videoTitle) throws ApiException {
        return videoQA(videoUrl, videoTitle, "", null);
    }

    /**
     * 视频质量检测
     *
     * @param videoUrl 视频地址 (required)
     * @param videoTitle 视频标题 (required)
     * @param modelName 模型名称
     * @param config 模型配置
     *
     * @return Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsyncVideoJobResponse videoQA(String videoUrl, String videoTitle, String modelName, Map<String, Object> config) throws ApiException {
        VideoRequest body = new VideoRequest();
        body.setModelName(modelName);
        body.setConfigure(config);
        body.setVideoTitle(videoTitle);
        body.setVideoUrl(videoUrl);
        body.setAction("VideoQA");
        ApiResponse<AsyncVideoJobResponse> resp = aiModelVideoWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 批量视频标签分类接口
     *
     * @param videos 视频地址列表 (required)
     * @param modelName 模型名称
     * @param config 模型配置
     *
     * @return Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsyncVideoBatchJobResponse batchVideoQA(List<VideoMeta> videos, String modelName, Map<String, Object> config) throws ApiException {
        BatchVideoRequest body = new BatchVideoRequest();
        body.setModelName(modelName);
        body.setConfigure(config);
        body.setVideos(videos);
        body.setAction("VideoQA");
        ApiResponse<AsyncVideoBatchJobResponse> resp = aiModelBatchVideoWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 视频检测接口
     * 
     * @param body 视频检测body (required)
     * @return Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsyncVideoJobResponse aiModelVideo(VideoRequest body) throws ApiException {
        ApiResponse<AsyncVideoJobResponse> resp = aiModelVideoWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 视频检测接口
     * 
     * @param body 视频检测body (required)
     * @return ApiResponse&lt;Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsyncVideoJobResponse> aiModelVideoWithHttpInfo(VideoRequest body) throws ApiException {
        com.squareup.okhttp.Call call = aiModelVideoValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<AsyncVideoJobResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 视频检测接口 (asynchronously)
     * 
     * @param body 视频检测body (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aiModelVideoAsync(VideoRequest body, final ApiCallback<Response> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aiModelVideoValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
